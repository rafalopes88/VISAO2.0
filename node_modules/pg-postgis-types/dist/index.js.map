{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import wkx from 'wkx';\nimport array from 'postgres-array';\nimport types from 'pg-custom-types';\nimport pg from 'pg';\n\nconst POSTGIS = 'postgis';\n\nconst TYPENAMES = [ 'geometry',\n                    'geometry_dump',\n                    'geography',\n                    'box2d',\n                    'box3d',\n                    '_geometry',\n                    '_geometry_dump',\n                    '_geography',\n                    '_box2d',\n                    '_box3d' ];\n\nconst GEOMETRY_OIDS = {};\nconst GEOMETRY_ARRAY_OIDS = {};\n\nconst GEOGRAPHY_OIDS = {};\nconst GEOGRAPHY_ARRAY_OIDS = {};\n\nconst TYPE_PARSERS = {};\n\nlet parseGeometryHandler = function (value) {\n  return wkx.Geometry.parse(new Buffer(value, 'hex'));\n};\n\nfunction typeNameKey(key) {\n  return key ? POSTGIS + '-' + key : POSTGIS;\n}\n\nfunction parseGeometry(value) {\n  return parseGeometryHandler(value);\n}\n\nfunction parseBox(value) {\n  value = value.substring(value.indexOf('(') + 1, value.indexOf(')'));\n\n  const pairs = value.split(',');\n  const coordinates = [];\n\n  for (let pair of pairs) {\n    coordinates.push(pair.split(' ').map(i => +i));\n  }\n\n  return coordinates;\n}\n\nfunction parsePostgisArray(parser) {\n  return types.allowNull((value) => {\n    return array.parse(value.replace(/:/g, ','), types.allowNull(parser));\n  });\n}\n\nconst parsers = {\n  geometry: types.allowNull(parseGeometry),\n  geography: types.allowNull(parseGeometry),\n  box2d: types.allowNull(parseBox),\n  box3d: types.allowNull(parseBox),\n  _geometry: parsePostgisArray(parseGeometry),\n  _geography: parsePostgisArray(parseGeometry),\n  _box2d: parsePostgisArray(parseBox),\n  _box3d: parsePostgisArray(parseBox)\n};\n\nfunction postgis(exec, key, callback) {\n  key = typeNameKey(key);\n\n  if (types.oids[key] && types.oids[key].geometry != null) {\n    return callback();\n  }\n\n  types(exec, key, TYPENAMES, (err, res) => {\n    if (err) {\n      return callback(err);\n    }\n\n    if (!TYPE_PARSERS[key]) {\n      TYPE_PARSERS[key] = {};\n    }\n\n    if (!GEOMETRY_OIDS[key]) {\n      GEOMETRY_OIDS[key] = {};\n    }\n\n    if (!GEOMETRY_ARRAY_OIDS[key]) {\n      GEOMETRY_ARRAY_OIDS[key] = {};\n    }\n\n    if (!GEOGRAPHY_OIDS[key]) {\n      GEOGRAPHY_OIDS[key] = {};\n    }\n\n    if (!GEOGRAPHY_ARRAY_OIDS[key]) {\n      GEOGRAPHY_ARRAY_OIDS[key] = {};\n    }\n\n    if (!postgis.names) {\n      postgis.names = {};\n    }\n\n    if (!postgis.oids) {\n      postgis.oids = {};\n    }\n\n    for (let parser of Object.keys(parsers)) {\n      if (res[parser]) {\n        pg.types.setTypeParser(+res[parser], parsers[parser]);\n\n        TYPE_PARSERS[key][+res[parser]] = parsers[parser];\n      }\n    }\n\n    GEOMETRY_OIDS[key] = res.geometry;\n    GEOMETRY_ARRAY_OIDS[key] = res._geometry;\n    GEOGRAPHY_OIDS[key] = res.geography;\n    GEOGRAPHY_ARRAY_OIDS[key] = res._geography;\n\n    postgis.names[key] = types.names[key];\n    postgis.oids[key] = types.oids[key];\n\n    callback();\n  });\n}\n\npostgis.isGeometryType = function (oid, key) {\n  key = typeNameKey(key);\n\n  return oid === GEOMETRY_OIDS[key] || oid === GEOGRAPHY_OIDS[key] ||\n         oid === GEOMETRY_ARRAY_OIDS[key] || oid === GEOGRAPHY_ARRAY_OIDS[key];\n};\n\npostgis.setGeometryParser = function (parser) {\n  parseGeometryHandler = parser;\n};\n\npostgis.getTypeParser = function (oid, key) {\n  key = typeNameKey(key);\n\n  return TYPE_PARSERS[key][+oid];\n};\n\npostgis.getTypeName = function (oid, key) {\n  return types.getTypeName(oid, typeNameKey(key));\n};\n\npostgis.getTypeOID = function (name, key) {\n  return types.getTypeOID(name, typeNameKey(key));\n};\n\nconst POSTGIS_TYPES = [\n  'Unknown',\n  'Point',\n  'LineString',\n  'Polygon',\n  'MultiPoint',\n  'MultiLineString',\n  'MultiPolygon',\n  'GeometryCollection',\n  'CircularString',\n  'CompoundCurve',\n  'CurvePolygon',\n  'MultiCurve',\n  'MultiSurface',\n  'PolyhedralSurface',\n  'Triangle',\n  'Tin'\n];\n\npostgis.srid = function (mod) {\n  return (((mod) & 0x1FFFFF00) << 3) >> 11;\n};\n\npostgis.type = function (mod) {\n  return (mod & 0x000000FC) >> 2;\n};\n\npostgis.z = function (mod) {\n  return (mod & 0x00000002) >> 1;\n};\n\npostgis.m = function (mod) {\n  return mod & 0x00000001;\n};\n\npostgis.ndims = function (mod) {\n  return 2 + postgis.z(mod) + postgis.m(mod);\n};\n\npostgis.typename = function (mod) {\n  const {type, srid, z, m} = postgis.typeobj(mod);\n\n  if (mod < 0) {\n    return '';\n  }\n\n  let name = '';\n\n  if (!(type || srid || z | m)) {\n    return '';\n  }\n\n  name += '(';\n\n  if (type) {\n    name += POSTGIS_TYPES[type];\n  } else {\n    name += 'Geometry';\n  }\n\n  if (z) {\n    name += 'Z';\n  }\n\n  if (m) {\n    name += 'M';\n  }\n\n  if (srid > 0) {\n    name += ',' + srid;\n  }\n\n  name += ')';\n\n  return name;\n};\n\npostgis.typeobj = function (mod) {\n  return {\n    type: postgis.type(mod),\n    srid: postgis.srid(mod),\n    z: postgis.z(mod),\n    m: postgis.m(mod),\n    ndims: postgis.ndims(mod)\n  };\n};\n\npostgis.geometryTypes = POSTGIS_TYPES;\n\nexport default postgis;\n"]}